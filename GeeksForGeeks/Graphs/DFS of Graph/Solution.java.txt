// { Driver Code Starts
//Initial Template for Java


import java.util.*;
import java.lang.*;
import java.io.*;

class Driverclass
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int t =sc.nextInt();
        while(t-- > 0)
        {
            ArrayList<ArrayList<Integer>> list = new ArrayList<>();
            int nov = sc.nextInt();
            int edg  =sc.nextInt();
            for(int i = 0; i < nov; i++)
                list.add(i, new ArrayList<Integer>());
                
            for(int i = 1; i <= edg; i++)
            {
                int u = sc.nextInt();
                int v = sc.nextInt();
                list.get(u).add(v);
                list.get(v).add(u);
            }
            
            ArrayList<Integer> res = new Traversal().dfs(list, nov);
            for (int i = 0; i < res.size (); i++) 
                System.out.print (res.get(i) + " ");
            System.out.println();
        }
    }
}

// } Driver Code Ends


//User function Template for Java


/*
g : adjacency list of graph
N : number of vertices

return a list containing the DFS traversal of the given graph
*/

class Traversal
{
    static void dfcRec(ArrayList<ArrayList<Integer>> g, int v, ArrayList<Integer> list, boolean[] visited) {
        
        visited[v] = true;
        
        list.add(v);
        
        for(int u : g.get(v)) {
            if(visited[u] == false) {
                dfcRec(g, u, list, visited);
            }
        }
        
    }
    
    static ArrayList<Integer> dfs(ArrayList<ArrayList<Integer>> g, int N)
    {
       // add your code here
       ArrayList<Integer> list = new ArrayList<>();
       
       boolean[] visited = new boolean[N];
       
       dfcRec(g, 0, list, visited);
       
       return list;
       
    }
}

