// { Driver Code Starts
// Initial Template for Java

import java.util.*;
import java.io.*;
import java.lang.*;

class Driverclass {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            int N = sc.nextInt();
            int M = sc.nextInt();

            ArrayList<ArrayList<Integer>> list = new ArrayList<>(N);

            // creating arraylist of arraylist
            for (int i = 0; i < N; i++) {
                ArrayList<Integer> temp = new ArrayList<>(M);
                list.add(i, temp);
            }

            // adding elements to the arraylist of arraylist
            for (int i = 0; i < N; i++) {
                for (int j = 0; j < M; j++) {
                    int val = sc.nextInt();
                    list.get(i).add(j, val);
                }
            }

            System.out.println(new Islands().findIslands(list, N, M));
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Islands {

    // Function to find the number of island in the given list A
    // N, M: size of list row and column respectively
    
    static void dfs(ArrayList<ArrayList<Integer>> A, int i, int j) {
        if(i<0 || i>=A.size() || j<0 || j>=A.get(i).size() || A.get(i).get(j) == 0) {
            return;
        }
        A.get(i).set(j, 0);
        
        dfs(A, i+1, j);
        dfs(A, i-1, j);
        dfs(A, i, j+1);
        dfs(A, i, j-1);
        
        // diagnally also
        dfs(A,i-1,j-1);
        dfs(A,i+1,j+1);
        dfs(A,i-1,j+1);
        dfs(A,i+1,j-1);
    }
    
    static int findIslands(ArrayList<ArrayList<Integer>> A, int N, int M) {

        // Your code here
        int count = 0;
        for(int i =0;i< N;i++) {
            for(int j = 0; j<M; j++) {
                if(A.get(i).get(j) == 1) {
                    
                    dfs(A, i, j);
                    
                    count += 1;
                }
            }
        }
        return count;
    }
}
